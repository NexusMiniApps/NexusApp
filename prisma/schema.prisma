generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = ["(function)", "pg_trgm", "(function)", "uuid_ossp"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model Idea {
  title                             String
  description                       String?
  dislikes                          Int        @default(0)
  likes                             Int        @default(0)
  event_id                          String?    @db.Uuid
  id                                String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                            String?    @db.Uuid
  Event_Event_confirmedIdeaIdToIdea Event[]    @relation("Event_confirmedIdeaIdToIdea")
  Event                             Event?     @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  author                            User?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userVotes                         UserVote[]
}

model User {
  telegramId BigInt       @unique
  firstName  String
  lastName   String?
  username   String?
  id         String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  events     Event[]
  EventRSVPs EventRSVPs[]
  ideas      Idea[]
  userVotes  UserVote[]
}

model UserVote {
  type   VoteType
  id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId String?  @db.Uuid
  ideaId String?  @db.Uuid
  idea   Idea?    @relation(fields: [ideaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Event {
  name                             String
  description                      String?
  chatId                           String       @default("")
  status                           EventStatus
  id                               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId                           String?      @db.Uuid
  messageId                        String?
  confirmedIdeaId                  String?      @db.Uuid
  Idea_Event_confirmedIdeaIdToIdea Idea?        @relation("Event_confirmedIdeaIdToIdea", fields: [confirmedIdeaId], references: [id], onUpdate: NoAction)
  author                           User?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  EventRSVPs                       EventRSVPs[]
  Idea                             Idea[]
}

model EventRSVPs {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  eventId   String     @db.Uuid
  userId    String     @db.Uuid
  chatId    String
  status    RSVPStatus
  messageId String?
  Event     Event      @relation(fields: [eventId], references: [id])
  User      User       @relation(fields: [userId], references: [id])
}

enum VoteType {
  LIKE
  DISLIKE
}

enum EventStatus {
  PENDING
  CONFIRMED
  DELETED
  COMPLETED
}

enum RSVPStatus {
  YES
  NO
  MAYBE
}
